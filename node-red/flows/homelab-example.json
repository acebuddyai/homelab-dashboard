[
    {
        "id": "homelab-flow",
        "type": "tab",
        "label": "Homelab AI Integration",
        "disabled": false,
        "info": "Example flows for integrating with Homelab AI services"
    },
    {
        "id": "health-check-inject",
        "type": "inject",
        "z": "homelab-flow",
        "name": "Daily Health Check",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str",
                "v": "health-check"
            }
        ],
        "repeat": "86400",
        "crontab": "00 09 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "health-check",
        "payload": "{}",
        "payloadType": "json",
        "x": 150,
        "y": 100,
        "wires": [["check-api-gateway"]]
    },
    {
        "id": "check-api-gateway",
        "type": "http request",
        "z": "homelab-flow",
        "name": "Check API Gateway",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://api-gateway:3000/health",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 370,
        "y": 100,
        "wires": [["check-ollama"]]
    },
    {
        "id": "check-ollama",
        "type": "http request",
        "z": "homelab-flow",
        "name": "Check Ollama",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://ollama:11434/api/tags",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 570,
        "y": 100,
        "wires": [["check-qdrant"]]
    },
    {
        "id": "check-qdrant",
        "type": "http request",
        "z": "homelab-flow",
        "name": "Check Qdrant",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://qdrant:6333/health",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 760,
        "y": 100,
        "wires": [["format-health-report"]]
    },
    {
        "id": "format-health-report",
        "type": "function",
        "z": "homelab-flow",
        "name": "Format Health Report",
        "func": "// Collect all health check results\nlet report = {\n    timestamp: new Date().toISOString(),\n    services: {\n        'API Gateway': flow.get('api_gateway_status') || 'Unknown',\n        'Ollama': flow.get('ollama_status') || 'Unknown',\n        'Qdrant': flow.get('qdrant_status') || 'Unknown',\n        'Node-RED': 'Healthy'\n    },\n    summary: 'All services operational'\n};\n\n// Check for any failures\nfor (let service in report.services) {\n    if (report.services[service] !== 'Healthy' && service !== 'Node-RED') {\n        report.summary = 'Some services are experiencing issues';\n        break;\n    }\n}\n\nmsg.payload = report;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 100,
        "wires": [["health-debug"]]
    },
    {
        "id": "health-debug",
        "type": "debug",
        "z": "homelab-flow",
        "name": "Health Report",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 100,
        "wires": []
    },
    {
        "id": "chat-input",
        "type": "inject",
        "z": "homelab-flow",
        "name": "Test AI Chat",
        "props": [
            {
                "p": "payload",
                "v": "Hello, can you explain what Node-RED is?",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 200,
        "wires": [["prepare-ollama-request"]]
    },
    {
        "id": "prepare-ollama-request",
        "type": "function",
        "z": "homelab-flow",
        "name": "Prepare Ollama Request",
        "func": "// Prepare the request for Ollama API\nmsg.payload = {\n    model: \"llama3.2:latest\",\n    messages: [\n        {\n            role: \"system\",\n            content: \"You are a helpful AI assistant integrated with a homelab automation system.\"\n        },\n        {\n            role: \"user\",\n            content: msg.payload\n        }\n    ],\n    stream: false\n};\n\nmsg.headers = {\n    'Content-Type': 'application/json'\n};\n\nmsg.url = 'http://ollama:11434/api/chat';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [["ollama-chat"]]
    },
    {
        "id": "ollama-chat",
        "type": "http request",
        "z": "homelab-flow",
        "name": "Ollama Chat",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 590,
        "y": 200,
        "wires": [["extract-response"]]
    },
    {
        "id": "extract-response",
        "type": "function",
        "z": "homelab-flow",
        "name": "Extract Response",
        "func": "// Extract the message from Ollama response\nif (msg.payload && msg.payload.message && msg.payload.message.content) {\n    msg.payload = msg.payload.message.content;\n} else {\n    msg.payload = \"No response received from AI\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 200,
        "wires": [["chat-output"]]
    },
    {
        "id": "chat-output",
        "type": "debug",
        "z": "homelab-flow",
        "name": "AI Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 200,
        "wires": []
    },
    {
        "id": "backup-flows",
        "type": "inject",
        "z": "homelab-flow",
        "name": "Daily Backup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 150,
        "y": 300,
        "wires": [["create-backup"]]
    },
    {
        "id": "create-backup",
        "type": "function",
        "z": "homelab-flow",
        "name": "Create Backup",
        "func": "// Create a backup of the current flows\nconst date = new Date();\nconst timestamp = date.toISOString().replace(/[:.]/g, '-');\n\nmsg.filename = `/data/backup/flows_${timestamp}.json`;\nmsg.payload = {\n    timestamp: date.toISOString(),\n    flows: flow.get('flows') || [],\n    message: 'Backup created successfully'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [["save-backup"]]
    },
    {
        "id": "save-backup",
        "type": "file",
        "z": "homelab-flow",
        "name": "Save Backup File",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 550,
        "y": 300,
        "wires": [["backup-complete"]]
    },
    {
        "id": "backup-complete",
        "type": "debug",
        "z": "homelab-flow",
        "name": "Backup Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 300,
        "wires": []
    },
    {
        "id": "memory-store",
        "type": "inject",
        "z": "homelab-flow",
        "name": "Store in Vector DB",
        "props": [
            {
                "p": "payload",
                "v": "{\"text\":\"Node-RED is a flow-based development tool for visual programming\",\"metadata\":{\"source\":\"manual\",\"timestamp\":\"2024-01-15\"}}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 400,
        "wires": [["prepare-memory-request"]]
    },
    {
        "id": "prepare-memory-request",
        "type": "function",
        "z": "homelab-flow",
        "name": "Prepare Memory Request",
        "func": "// Prepare request to store in vector database via API Gateway\nmsg.payload = {\n    collection: \"homelab_knowledge\",\n    documents: [\n        {\n            text: msg.payload.text,\n            metadata: msg.payload.metadata || {}\n        }\n    ]\n};\n\nmsg.headers = {\n    'Content-Type': 'application/json'\n};\n\nmsg.url = 'http://api-gateway:3000/api/memory/store';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [["store-in-qdrant"]]
    },
    {
        "id": "store-in-qdrant",
        "type": "http request",
        "z": "homelab-flow",
        "name": "Store in Qdrant",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 600,
        "y": 400,
        "wires": [["memory-result"]]
    },
    {
        "id": "memory-result",
        "type": "debug",
        "z": "homelab-flow",
        "name": "Memory Storage Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 400,
        "wires": []
    },
    {
        "id": "search-memory",
        "type": "inject",
        "z": "homelab-flow",
        "name": "Search Vector DB",
        "props": [
            {
                "p": "payload",
                "v": "visual programming",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 500,
        "wires": [["prepare-search-request"]]
    },
    {
        "id": "prepare-search-request",
        "type": "function",
        "z": "homelab-flow",
        "name": "Prepare Search Request",
        "func": "// Prepare request to search vector database\nmsg.payload = {\n    collection: \"homelab_knowledge\",\n    query: msg.payload,\n    limit: 5\n};\n\nmsg.headers = {\n    'Content-Type': 'application/json'\n};\n\nmsg.url = 'http://api-gateway:3000/api/memory/search';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 500,
        "wires": [["search-qdrant"]]
    },
    {
        "id": "search-qdrant",
        "type": "http request",
        "z": "homelab-flow",
        "name": "Search Qdrant",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 580,
        "y": 500,
        "wires": [["search-results"]]
    },
    {
        "id": "search-results",
        "type": "debug",
        "z": "homelab-flow",
        "name": "Search Results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 500,
        "wires": []
    }
]
