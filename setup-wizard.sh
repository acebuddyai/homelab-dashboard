#!/bin/bash

# Homelab Interactive Setup Wizard
# Configures all services with user-friendly prompts

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="${SCRIPT_DIR}/.env"
CREDENTIALS_FILE="${SCRIPT_DIR}/SERVICE_CREDENTIALS.md"

# Function to print colored output
print_color() {
    color=$1
    shift
    echo -e "${color}$@${NC}"
}

# Function to print section headers
print_header() {
    echo
    print_color $CYAN "╔════════════════════════════════════════════════════════════════════╗"
    printf "${CYAN}║${NC} ${BOLD}%-66s${NC} ${CYAN}║${NC}\n" "$1"
    print_color $CYAN "╚════════════════════════════════════════════════════════════════════╝"
    echo
}

# Function to prompt for input with default value
prompt_input() {
    local prompt=$1
    local default=$2
    local var_name=$3
    local is_password=$4

    if [ "$is_password" = "true" ]; then
        echo -n "$prompt"
        if [ ! -z "$default" ]; then
            echo -n " [hidden]: "
        else
            echo -n ": "
        fi
        read -s input_value
        echo
    else
        if [ ! -z "$default" ]; then
            read -p "$prompt [$default]: " input_value
        else
            read -p "$prompt: " input_value
        fi
    fi

    if [ -z "$input_value" ] && [ ! -z "$default" ]; then
        eval $var_name=\"$default\"
    else
        eval $var_name=\"$input_value\"
    fi
}

# Function to generate random password
generate_password() {
    openssl rand -base64 32 | tr -d "=+/" | cut -c1-20
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check Docker status
check_docker() {
    if ! command_exists docker; then
        print_color $RED "✗ Docker is not installed!"
        echo "Please install Docker first: https://docs.docker.com/get-docker/"
        exit 1
    fi

    if ! docker ps >/dev/null 2>&1; then
        print_color $RED "✗ Docker is not running or you don't have permissions!"
        echo "Try: sudo usermod -aG docker $USER && newgrp docker"
        exit 1
    fi

    print_color $GREEN "✓ Docker is installed and running"
}

# Function to check system resources
check_resources() {
    print_header "System Resources Check"

    # Check RAM
    total_ram=$(free -g | awk '/^Mem:/{print $2}')
    if [ "$total_ram" -lt 8 ]; then
        print_color $RED "✗ Insufficient RAM: ${total_ram}GB (minimum 8GB required)"
        exit 1
    else
        print_color $GREEN "✓ RAM: ${total_ram}GB"
    fi

    # Check disk space
    available_space=$(df -BG "${SCRIPT_DIR}" | awk 'NR==2 {print int($4)}')
    if [ "$available_space" -lt 20 ]; then
        print_color $YELLOW "⚠ Low disk space: ${available_space}GB available"
    else
        print_color $GREEN "✓ Disk space: ${available_space}GB available"
    fi
}

# Function to setup environment
setup_environment() {
    print_header "Environment Configuration"

    # Domain configuration
    prompt_input "Enter your domain (or use localhost)" "localhost" DOMAIN false
    prompt_input "Enter your email for SSL certificates" "admin@${DOMAIN}" EMAIL false

    # Nextcloud configuration
    print_color $CYAN "\n--- Nextcloud Configuration ---"
    prompt_input "Nextcloud admin username" "admin" NEXTCLOUD_ADMIN false
    NEXTCLOUD_PASS=$(generate_password)
    prompt_input "Nextcloud admin password" "$NEXTCLOUD_PASS" NEXTCLOUD_PASSWORD true

    # Database passwords
    print_color $CYAN "\n--- Database Configuration ---"
    DB_PASS=$(generate_password)
    prompt_input "Database password (auto-generated)" "$DB_PASS" DB_PASSWORD true

    # Save to .env file
    cat > "$ENV_FILE" << EOF
# Homelab Environment Configuration
# Generated by Setup Wizard on $(date)

# Domain Configuration
DOMAIN=${DOMAIN}
EMAIL=${EMAIL}

# Nextcloud Configuration
NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN}
NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_PASSWORD}
NEXTCLOUD_DB_PASSWORD=${DB_PASSWORD}

# Database Configuration
POSTGRES_PASSWORD=${DB_PASSWORD}
MYSQL_ROOT_PASSWORD=${DB_PASSWORD}

# Service Ports
DASHBOARD_PORT=8080
OLLAMA_PORT=11434
NEXTCLOUD_PORT=8082
WEBMAIL_PORT=8086
CALENDAR_PORT=5232
EOF

    chmod 600 "$ENV_FILE"
    print_color $GREEN "✓ Environment configuration saved"
}

# Function to setup Ollama
setup_ollama() {
    print_header "AI Model Setup (Ollama)"

    print_color $BLUE "Checking Ollama status..."

    if docker ps | grep -q ollama; then
        print_color $GREEN "✓ Ollama is running"

        # Check for models
        if docker exec ollama ollama list 2>/dev/null | grep -q "llama3.2:1b"; then
            print_color $GREEN "✓ llama3.2:1b model is already installed"
        else
            print_color $YELLOW "Installing llama3.2:1b model (this may take a few minutes)..."
            docker exec ollama ollama pull llama3.2:1b || {
                print_color $YELLOW "⚠ Could not pull model. You can do this manually later:"
                echo "  docker exec ollama ollama pull llama3.2:1b"
            }
        fi
    else
        print_color $YELLOW "⚠ Ollama is not running"
        read -p "Start Ollama now? (y/n): " start_ollama
        if [[ "$start_ollama" =~ ^[Yy]$ ]]; then
            docker-compose -f docker-compose-ai-stack.yml up -d ollama
            sleep 5
            docker exec ollama ollama pull llama3.2:1b
        fi
    fi
}

# Function to setup email
setup_email() {
    print_header "Email Service Setup"

    print_color $BLUE "Email service options:"
    echo "1. Roundcube (webmail only, requires external SMTP/IMAP)"
    echo "2. Full mail server (Docker Mailserver)"
    echo "3. Skip email setup"

    read -p "Choose option (1-3): " email_choice

    case $email_choice in
        1)
            print_color $YELLOW "Roundcube is already configured at https://mail.${DOMAIN}"
            echo "Configure your external IMAP/SMTP server in Roundcube settings"
            ;;
        2)
            print_color $CYAN "Setting up Docker Mailserver..."
            prompt_input "Enter email domain" "${DOMAIN}" MAIL_DOMAIN false
            prompt_input "Create first email address (user@${MAIL_DOMAIN})" "admin@${MAIL_DOMAIN}" FIRST_EMAIL false
            EMAIL_PASS=$(generate_password)
            prompt_input "Password for ${FIRST_EMAIL}" "$EMAIL_PASS" EMAIL_PASSWORD true

            # Create mailserver config directory
            mkdir -p "${SCRIPT_DIR}/mail-data/config"

            # Create email account
            echo "${FIRST_EMAIL}|$(echo -n "${EMAIL_PASSWORD}" | sha512sum | awk '{print $1}')" > "${SCRIPT_DIR}/mail-data/config/postfix-accounts.cf"

            print_color $GREEN "✓ Email configuration prepared"
            echo "  Email: ${FIRST_EMAIL}"
            echo "  Password: ${EMAIL_PASSWORD}"
            ;;
        3)
            print_color $BLUE "Skipping email setup"
            ;;
    esac
}

# Function to setup calendar
setup_calendar() {
    print_header "Calendar Service Setup (Baikal)"

    if docker ps | grep -q baikal; then
        print_color $GREEN "✓ Baikal is running"
        print_color $YELLOW "Complete setup at: https://calendar.${DOMAIN}/admin/"
        echo "  1. Access the admin panel"
        echo "  2. Create admin account on first visit"
        echo "  3. Configure your timezone and settings"

        read -p "Create a calendar user now? (y/n): " create_user
        if [[ "$create_user" =~ ^[Yy]$ ]]; then
            prompt_input "Calendar username" "${USER}" CAL_USER false
            CAL_PASS=$(generate_password)
            prompt_input "Calendar password" "$CAL_PASS" CAL_PASSWORD true

            print_color $YELLOW "User credentials (save these):"
            echo "  Username: ${CAL_USER}"
            echo "  Password: ${CAL_PASSWORD}"
            echo "  CalDAV URL: https://calendar.${DOMAIN}/dav.php/calendars/${CAL_USER}/"
            echo "  CardDAV URL: https://calendar.${DOMAIN}/dav.php/addressbooks/${CAL_USER}/"
        fi
    else
        print_color $YELLOW "⚠ Baikal is not running"
        read -p "Start Baikal now? (y/n): " start_baikal
        if [[ "$start_baikal" =~ ^[Yy]$ ]]; then
            docker-compose -f docker-compose-calendar.yml up -d baikal
        fi
    fi
}

# Function to setup Nextcloud
setup_nextcloud() {
    print_header "Nextcloud Setup"

    if docker ps | grep -q nextcloud; then
        print_color $GREEN "✓ Nextcloud is running"

        # Check if already configured
        if docker exec nextcloud php occ user:list 2>/dev/null | grep -q "Decency1272"; then
            print_color $BLUE "Nextcloud is already configured"
            echo "  URL: https://files.${DOMAIN}"
            echo "  User: Decency1272"

            read -p "Reset password for Decency1272? (y/n): " reset_pass
            if [[ "$reset_pass" =~ ^[Yy]$ ]]; then
                NEW_PASS=$(generate_password)
                prompt_input "New password" "$NEW_PASS" NC_PASSWORD true
                docker exec -e OC_PASS="${NC_PASSWORD}" nextcloud php occ user:resetpassword --password-from-env Decency1272
                print_color $GREEN "✓ Password updated"
            fi
        else
            print_color $YELLOW "Setting up Nextcloud admin account..."
            docker exec nextcloud php occ maintenance:install \
                --admin-user "${NEXTCLOUD_ADMIN}" \
                --admin-pass "${NEXTCLOUD_PASSWORD}" \
                --database pgsql \
                --database-host nextcloud-db \
                --database-name nextcloud \
                --database-user nextcloud \
                --database-pass "${DB_PASSWORD}"

            print_color $GREEN "✓ Nextcloud configured"
            echo "  URL: https://files.${DOMAIN}"
            echo "  Admin: ${NEXTCLOUD_ADMIN}"
        fi
    else
        print_color $YELLOW "⚠ Nextcloud is not running"
    fi
}

# Function to display service URLs
display_urls() {
    print_header "Service Access URLs"

    if [ "$DOMAIN" = "localhost" ]; then
        print_color $CYAN "Local Access URLs:"
        echo "  Dashboard:    http://localhost:8080"
        echo "  Webmail:      http://localhost:8086"
        echo "  Calendar:     http://localhost:5233"
        echo "  Nextcloud:    http://localhost:8082"
        echo "  Ollama API:   http://localhost:11434"
    else
        print_color $CYAN "Public Access URLs:"
        echo "  Dashboard:    https://ai.${DOMAIN}"
        echo "  Webmail:      https://mail.${DOMAIN}"
        echo "  Calendar:     https://calendar.${DOMAIN}"
        echo "  Nextcloud:    https://files.${DOMAIN}"
        echo "  Chat:         https://chat.${DOMAIN}"
        echo "  Workflows:    https://workflows.${DOMAIN}"
        echo "  Tasks:        https://tasks.${DOMAIN}"
        echo "  Search:       https://search.${DOMAIN}"
    fi
}

# Function to save credentials
save_credentials() {
    print_header "Saving Credentials"

    if [ -f "$CREDENTIALS_FILE" ]; then
        cp "$CREDENTIALS_FILE" "${CREDENTIALS_FILE}.backup"
        print_color $YELLOW "Backed up existing credentials to ${CREDENTIALS_FILE}.backup"
    fi

    # Append new credentials to file
    cat >> "$CREDENTIALS_FILE" << EOF

## Setup Wizard Generated - $(date)

### Domain: ${DOMAIN}

#### Nextcloud
- Admin User: ${NEXTCLOUD_ADMIN:-Not Set}
- Admin Password: ${NEXTCLOUD_PASSWORD:-Not Set}

#### Email
- First Email: ${FIRST_EMAIL:-Not Set}
- Email Password: ${EMAIL_PASSWORD:-Not Set}

#### Calendar
- Username: ${CAL_USER:-Not Set}
- Password: ${CAL_PASSWORD:-Not Set}

---
EOF

    chmod 600 "$CREDENTIALS_FILE"
    print_color $GREEN "✓ Credentials saved to ${CREDENTIALS_FILE}"
    print_color $YELLOW "⚠ Keep this file secure and do not commit to Git!"
}

# Main setup flow
main() {
    clear
    print_color $PURPLE "${BOLD}
    ╦ ╦┌─┐┌┬┐┌─┐┬  ┌─┐┌┐   ╔═╗┌─┐┌┬┐┬ ┬┌─┐  ╦ ╦┬┌─┐┌─┐┬─┐┌┬┐
    ╠═╣│ ││││├┤ │  ├─┤├┴┐  ╚═╗├┤  │ │ │├─┘  ║║║│┌─┘├─┤├┬┘ ││
    ╩ ╩└─┘┴ ┴└─┘┴─┘┴ ┴└─┘  ╚═╝└─┘ ┴ └─┘┴    ╚╩╝┴└─┘┴ ┴┴└──┴┘
    ${NC}"

    print_color $CYAN "Welcome to the Homelab Setup Wizard!"
    print_color $BLUE "This wizard will help you configure all services."
    echo

    # Check prerequisites
    check_docker
    check_resources

    # Load existing environment if available
    if [ -f "$ENV_FILE" ]; then
        print_color $YELLOW "Found existing configuration in .env"
        read -p "Use existing configuration? (y/n): " use_existing
        if [[ "$use_existing" =~ ^[Yy]$ ]]; then
            source "$ENV_FILE"
        else
            setup_environment
        fi
    else
        setup_environment
    fi

    # Setup services
    setup_ollama
    setup_email
    setup_calendar
    setup_nextcloud

    # Save all credentials
    save_credentials

    # Display summary
    display_urls

    print_header "Setup Complete!"

    print_color $GREEN "✓ Your Homelab is configured!"
    echo
    print_color $BLUE "Next steps:"
    echo "  1. Check service status: ./check-services.sh"
    echo "  2. View credentials: cat ${CREDENTIALS_FILE}"
    echo "  3. Access dashboard: http://localhost:8080"
    echo
    print_color $YELLOW "Remember to:"
    echo "  - Keep credentials file secure"
    echo "  - Configure firewall rules"
    echo "  - Set up regular backups"
    echo "  - Monitor service logs"
    echo
    print_color $CYAN "GitHub: https://github.com/acebuddyai/homelab-dashboard"
}

# Run main function
main "$@"
